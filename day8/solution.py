def parse(inputs):
    antenna_map = {}
    total_map = [list(i) for i in inputs.split('\n')]
    for i in range(len(total_map)):
        for j in range(len(total_map[0])):
            if total_map[i][j] != '.':
                if total_map[i][j] not in antenna_map:
                    antenna_map[total_map[i][j]] = [(i, j,)]
                else:
                    antenna_map[total_map[i][j]].append((i,j,))
    
    return (antenna_map, len(total_map), len(total_map[0]), total_map)

def mirror(node_1, node_2, rep):
    dx = node_1[0] - node_2[0]
    dy = node_1[1] - node_2[1]
    return (node_1[0] + rep * dx, node_1[1] + rep * dy)

def part_1(inputs):
    antenna_map, row, col, grids = parse(inputs)
    print(antenna_map)
    # r = 0
    antinodes = set()
    for antenna, locations in antenna_map.items():
        if len(locations) <= 1:
            continue
        for i in range(len(locations)-1):
            for j in range(i+1, len(locations)):
                node_1 = locations[i]
                node_2 = locations[j]
                for a, b in ((node_1, node_2), (node_2, node_1)):
                    # k = 0
                    # while True:
                    m = mirror(a, b, 1)
                    if m[0] < 0 or m[0] >=row or m[1] < 0 or m[1] >= col:
                        continue
                    antinodes.add(m)
                    # k += 1
        # r += len(antinodes)
    for antinode in antinodes:
        grids[antinode[0]][antinode[1]] = '#'
    for line in grids:
        print("".join(line))
    print(len(antinodes))


def part_2(inputs):
    antenna_map, row, col, grids = parse(inputs)
    print(antenna_map)
    # r = 0
    antinodes = set()
    for antenna, locations in antenna_map.items():
        if len(locations) <= 1:
            continue
        for i in range(len(locations)-1):
            for j in range(i+1, len(locations)):
                node_1 = locations[i]
                node_2 = locations[j]
                for a, b in ((node_1, node_2), (node_2, node_1)):
                    k = 0
                    while True:
                        m = mirror(a, b, k)
                        if m[0] < 0 or m[0] >=row or m[1] < 0 or m[1] >= col:
                            break
                        antinodes.add(m)
                        k += 1
        # r += len(antinodes)
    for antinode in antinodes:
        grids[antinode[0]][antinode[1]] = '#'
    for line in grids:
        print("".join(line))
    print(len(antinodes))

sample_inputs = """............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............"""

inputs = """..........................4..............7..q.....
..........G..42.f......K.........7................
D.t...S......A....................................
..K.................................I.............
G....D...f.tA..H.S..........o................N....
t....f..............4..A........B.........N.....q.
...b...k....f..h..........6.......................
..........b....m................7...............Q.
....h....G.2........K.i...........................
.F...2.....D....H..6..o........I..................
k.......b..................K......I.....e.....B...
.............Sp..o....n....R.............N........
F............d................2...................
.........i........................................
.....ma.....d......p.Q..n.....7....9..........N...
......m..H......S...8......n.....Q...e............
.i..............8......O.....I................c...
..d......k....R.....................9....z........
..p.......m......n...............P................
.......pLb...................W..j................q
.....C..1..........u.....c.....jO...Z..o.........V
..C.....i........X1......9......e....j.....B....c.
......................9...........Q..Z............
.d....h..L...............8........O...............
....C....r..L....R...............6................
...........h.............1.t......P.......V.......
.......L.1........................................
..................................................
X.......................................V.....W...
rx........a.X.......0....l..........6.........z...
..r........a.8.................................z..
................w.........l..............P....A...
..........E....s..w.j........l...............W....
...v...............c..............W..y...V.O......
.....X..g.Y...0w......l...................u.......
.C.......Y...0....................................
...g..UJ...0........v.............................
.U...aY...........................................
....5........Y....MUJ..........B..................
.......g...5M........J.......w.........u..Z.......
................TE................................
..U....r....5.................J..........Z........
.......5...3......s........T......................
.............E.T..............................u...
...........v........y.......................P.....
................s.................................
x............M3........e..........................
........3...v......MT.............................
.............x....................................
....x..........3............y....................."""

part_1(inputs)
part_2(inputs)